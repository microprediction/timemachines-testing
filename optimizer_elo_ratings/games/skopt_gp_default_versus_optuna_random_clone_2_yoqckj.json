{"n_dim": 34, "n_trials": 50, "objective": "griewank_on_cube", "white": "skopt_gp_default", "black": "optuna_random_clone_2", "traceback": ["Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/timemachines/optimizers/eloratings.py\", line 41, in optimizer_game\n    white_best_val, white_best_x, white_feval_count = white(objective, n_trials=n_white_trials, n_dim=n_dim,\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/timemachines/optimizers/skoptcube.py\", line 59, in skopt_gp_default_cube\n    return skopt_gp_cube_factory(objective=objective,n_trials=n_trials,n_dim=n_dim, with_count=with_count,\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/timemachines/optimizers/skoptcube.py\", line 50, in skopt_gp_cube_factory\n    result = gp_minimize(func=_objective,  dimensions=bounds, n_calls=n_trials, n_jobs=1, **gp_params)\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/skopt/optimizer/gp.py\", line 259, in gp_minimize\n    return base_minimize(\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/skopt/optimizer/base.py\", line 302, in base_minimize\n    result = optimizer.tell(next_x, next_y)\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/skopt/optimizer/optimizer.py\", line 493, in tell\n    return self._tell(x, y, fit=fit)\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/skopt/optimizer/optimizer.py\", line 536, in _tell\n    est.fit(self.space.transform(self.Xi), self.yi)\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/skopt/learning/gaussian_process/gpr.py\", line 195, in fit\n    super(GaussianProcessRegressor, self).fit(X, y)\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/sklearn/gaussian_process/_gpr.py\", line 235, in fit\n    optima = [(self._constrained_optimization(obj_func,\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/sklearn/gaussian_process/_gpr.py\", line 506, in _constrained_optimization\n    opt_res = scipy.optimize.minimize(\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/scipy/optimize/_minimize.py\", line 619, in minimize\n    return _minimize_lbfgsb(fun, x0, args, jac, bounds,\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/scipy/optimize/lbfgsb.py\", line 306, in _minimize_lbfgsb\n    sf = _prepare_scalar_function(fun, x0, jac=jac, args=args, epsilon=eps,\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/scipy/optimize/optimize.py\", line 261, in _prepare_scalar_function\n    sf = ScalarFunction(fun, x0, args, grad, hess,\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/scipy/optimize/_differentiable_functions.py\", line 136, in __init__\n    self._update_fun()\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/scipy/optimize/_differentiable_functions.py\", line 226, in _update_fun\n    self._update_fun_impl()\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/scipy/optimize/_differentiable_functions.py\", line 133, in update_fun\n    self.f = fun_wrapped(self.x)\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/scipy/optimize/_differentiable_functions.py\", line 130, in fun_wrapped\n    return fun(x, *args)\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/scipy/optimize/optimize.py\", line 74, in __call__\n    self._compute_if_needed(x, *args)\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/scipy/optimize/optimize.py\", line 68, in _compute_if_needed\n    fg = self.fun(x, *args)\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/sklearn/gaussian_process/_gpr.py\", line 227, in obj_func\n    lml, grad = self.log_marginal_likelihood(\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/sklearn/gaussian_process/_gpr.py\", line 481, in log_marginal_likelihood\n    alpha = cho_solve((L, True), y_train)  # Line 3\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/scipy/linalg/decomp_cholesky.py\", line 194, in cho_solve\n    b1 = asarray_chkfinite(b)\n  File \"/opt/hostedtoolcache/Python/3.8.7/x64/lib/python3.8/site-packages/numpy/lib/function_base.py\", line 488, in asarray_chkfinite\n    raise ValueError(\nValueError: array must not contain infs or NaNs\n", "passing"], "best_val": [null, null], "best_x": [null, null], "feval_count": [null, null], "n_trials_instructed": [null, null], "passing": [false, null], "completed": false, "winner": "incomplete", "points": null}